{"version":3,"file":"static/js/497.aa36f12e.chunk.js","mappings":"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","sources":["pages/payout/RequestPayoutView.js"],"sourcesContent":["import { Button, CircularProgress, Grid, Stack, Typography } from \"@mui/material\";\r\nimport React from \"react\";\r\nimport { Form, Field } from \"react-final-form\";\r\nimport { useTranslation } from \"react-i18next\";\r\nimport DrawerComponent from \"../../components/Drawer\";\r\nimport { NumbericInputCustom, SelectCustom } from \"../../components/FormElements\";\r\nimport { portal_config } from \"../../portal.config\";\r\nimport { cache } from \"../../utils/cache\";\r\nimport { getCurrencySymbol } from \"../../utils/common\";\r\nimport { formatAmount } from \"../../utils/util\";\r\nimport validators from \"../../utils/validators\";\r\nimport { dataUtil } from \"../../wsclient/crmservices/dataUtil\";\r\n\r\nexport default function RequestPayoutView(props) {\r\n    const { t } = useTranslation();\r\n    const { paymentMethods, type, paymentMethodTypes, wallet, showLoadWallet } = props;\r\n    const currency_code = cache.getCurrencyCode();\r\n    let _types = [];\r\n    let _paymentMethods = [];\r\n\r\n    if (paymentMethodTypes && paymentMethodTypes.length > 1) {\r\n        paymentMethodTypes.forEach(item => {\r\n            if (item ==='CARD') {\r\n                _types.push({\r\n                    label: t('card'),\r\n                    value: 'CARD',\r\n                })\r\n            }\r\n            if (item ==='ACCOUNT_DEBIT') {\r\n                _types.push({\r\n                    label: t('account_debit'),\r\n                    value: 'ACCOUNT_DEBIT',\r\n                })\r\n            }\r\n            if (item ==='WALLET') {\r\n                _types.push({\r\n                    label: t('wallet'),\r\n                    value: 'WALLET',\r\n                })\r\n            }\r\n        });\r\n    }\r\n    if (paymentMethods) {\r\n        if (type ==='CARD' && paymentMethods.cards) {\r\n            let _cards = [];\r\n            paymentMethods.cards.forEach(item => {\r\n                let label = null;\r\n                if (item.card && item.card.last4) {\r\n                    label = '****' + item.card.last4\r\n                }\r\n                if (label) _cards.push({ ...item, label: label });\r\n            });\r\n            _paymentMethods = _cards;\r\n        }\r\n        if (type ==='WALLET' && paymentMethods.wallets) {\r\n            let _wallets = [];\r\n            paymentMethods.wallets.forEach(item => {\r\n                let label = null;\r\n                if (item.wallet && item.wallet.email) {\r\n                    label = item.wallet.email\r\n                } else if (item.wallet && item.wallet.phone && item.wallet.phone.number) {\r\n                    label = item.wallet.phone.number\r\n                }\r\n                if (label) _wallets.push({ ...item, label: label });\r\n            });\r\n            _paymentMethods = _wallets;\r\n        }\r\n        if (type ==='ACCOUNT_DEBIT' && paymentMethods.accountDebits) {\r\n            let _accountDebits = [];\r\n            paymentMethods.accountDebits.forEach(item => {\r\n                let accountLabel = item.account_debit && item.account_debit.account_name ? item.account_debit.account_name : null;\r\n                if (item.account_debit) {\r\n                    if (currency_code ==='EUR') {\r\n                        if (item.account_debit.iban) {\r\n                            let first4 = item.account_debit.iban.substr(0, 4);\r\n                            let last4 = item.account_debit.iban.substr(item.account_debit.iban.length - 4, item.account_debit.iban.length);\r\n                            accountLabel = first4 + \" **** **** **** **** \" + last4;\r\n                        }\r\n                    }\r\n                    if (currency_code ==='GBP') {\r\n                        accountLabel = item.account_debit.account_number ? item.account_debit.account_number : ''\r\n                    }\r\n                    if (currency_code ==='USD') {\r\n                        accountLabel = item.account_debit.account_number ? item.account_debit.account_number : ''\r\n                    }\r\n                }\r\n                if (accountLabel) _accountDebits.push({ ...item, label: accountLabel });\r\n            });\r\n            _paymentMethods = _accountDebits;\r\n        }\r\n    }\r\n    let currency = cache.getCurrency();\r\n    let currencyCode = cache.getCurrencyCode();\r\n    const businessBalance = wallet ? dataUtil.getBalanceByType(wallet.balances, true) : null;\r\n    const currencyBusiness = businessBalance ? (businessBalance.currency_code ? getCurrencySymbol(businessBalance.currency_code) : currency) : null;\r\n    const crmBalance = wallet ? dataUtil.getBalanceByType(wallet.balances, false, businessBalance.currency_code ? businessBalance.currency_code : currencyCode) : null;\r\n    const currencyCRM = crmBalance ? (crmBalance.currency_code ? getCurrencySymbol(crmBalance.currency_code) : currency) : null;\r\n\r\n    return (\r\n        <>\r\n            <DrawerComponent isOpen={props.isOpen} onClose={props.onClose} title={t('request_payout')} message={props.message} showProcessing={props.showProcessing}>\r\n                <Grid item xs={12}>\r\n                    <center>\r\n                        {showLoadWallet ? <CircularProgress /> : <>\r\n                            <Stack direction={'row'} alignItems='center' spacing={1}>\r\n                                <Stack flex={1}>\r\n                                    <Typography variant=\"h3\">{currencyBusiness}{businessBalance && businessBalance.open ? formatAmount(businessBalance.open, portal_config.isFormatDecimalBalance) : '0.00'}</Typography>\r\n                                    <Typography variant=\"subtitle2\">{t('any_where')}</Typography>\r\n                                </Stack>\r\n                                <Stack flex={1}>\r\n                                    <Typography variant=\"h3\">{currencyCRM}{crmBalance && crmBalance.total ? formatAmount(crmBalance.total, portal_config.isFormatDecimalBalance) : '0.00'}</Typography>\r\n                                    <Typography variant=\"subtitle2\">{t('cash_pocket')}</Typography>\r\n                                </Stack>\r\n                            </Stack>\r\n                        </>}\r\n                    </center>\r\n                    <Form\r\n                        onSubmit={props.onSubmit}\r\n                        render={({ handleSubmit }) => (\r\n                            <Grid item xs={12}>\r\n                                {_types && _types.length > 1 && <Grid item xs={12} marginY={2}>\r\n                                    <Field\r\n                                        name=\"type\"\r\n                                        component={SelectCustom}\r\n                                        isEdit={true}\r\n                                        isValid={true}\r\n                                        selectData={_types}\r\n                                        placeholder={' '}\r\n                                        label={t('select_your_payment_method_type')}\r\n                                        onSelectedChange={(e) => props.onHandleChange('type', e.target.value)}\r\n                                    />\r\n                                </Grid>}\r\n                                <Grid item xs={12} marginY={2}>\r\n                                    <Field\r\n                                        name=\"payment_method\"\r\n                                        component={SelectCustom}\r\n                                        placeholder={' '}\r\n                                        label={t('select_your_payment_method')}\r\n                                        isEdit={true}\r\n                                        isValid={true}\r\n                                        selectData={_paymentMethods}\r\n                                        keyName='id'\r\n                                        keyLabel={'label'}\r\n                                        onSelectedChange={(e) => props.onHandleChange('payment_method', e.target.value)}\r\n                                    />\r\n                                </Grid>\r\n                                <Grid item xs={12} marginY={2}>\r\n                                    <Field\r\n                                        name=\"amount\"\r\n                                        label={t('request_payout_amount')}\r\n                                        component={NumbericInputCustom}\r\n                                        isEdit={true}\r\n                                        isValid={true}\r\n                                        validate={validators.composeValidators(validators.required)}\r\n                                        customLabel=\"wallet\"\r\n                                        formatType=\"currency\"\r\n                                    />\r\n                                </Grid>\r\n                                <Grid item xs={12} marginY={3}>\r\n                                    <Button id='requestPayout/btnSubmit' size=\"large\" fullWidth variant='contained' onClick={handleSubmit} type='submit'>{t('btn_submit')}</Button>\r\n                                </Grid>\r\n                            </Grid>\r\n                        )}\r\n                    />\r\n                </Grid>\r\n            </DrawerComponent>\r\n        </>\r\n    )\r\n}"],"names":["RequestPayoutView","props","t","useTranslation","paymentMethods","type","paymentMethodTypes","wallet","showLoadWallet","currency_code","cache","getCurrencyCode","_types","_paymentMethods","length","forEach","item","push","label","value","cards","_cards","card","last4","_objectSpread","wallets","_wallets","email","phone","number","accountDebits","_accountDebits","accountLabel","account_debit","account_name","iban","substr","account_number","currency","getCurrency","currencyCode","businessBalance","dataUtil","getBalanceByType","balances","currencyBusiness","getCurrencySymbol","crmBalance","currencyCRM","_jsx","_Fragment","children","DrawerComponent","isOpen","onClose","title","message","showProcessing","_jsxs","Grid","xs","CircularProgress","Stack","direction","alignItems","spacing","flex","Typography","variant","open","formatAmount","portal_config","isFormatDecimalBalance","total","Form","onSubmit","render","_ref","handleSubmit","marginY","Field","name","component","SelectCustom","isEdit","isValid","selectData","placeholder","onSelectedChange","e","onHandleChange","target","keyName","keyLabel","NumbericInputCustom","validate","validators","composeValidators","required","customLabel","formatType","Button","id","size","fullWidth","onClick"],"sourceRoot":""}