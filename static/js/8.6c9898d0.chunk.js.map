{"version":3,"file":"static/js/8.6c9898d0.chunk.js","mappings":"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","sources":["custom_src/pages/landing-page/LandingPageView.js","pages/landing-page/LandingPageController.js","pages/landing-page/LandingPageView.js"],"sourcesContent":["import { Grid, Typography } from \"@mui/material\";\r\nimport React from \"react\";\r\n\r\nexport default function LandingPageView(props){\r\n\r\n    return(\r\n        <Grid item x={12}>\r\n            <Typography>LandingPageView</Typography>\r\n        </Grid>\r\n    )\r\n}","import React, { useEffect, useState } from 'react'\r\nimport { useTranslation } from 'react-i18next';\r\nimport { useNavigate } from 'react-router-dom'\r\nimport { portal_config } from '../../portal.config';\r\nimport { config_path } from '../../router/config.path';\r\nimport LandingPageView from './LandingPageView'\r\nimport { getLanguage, storeLanguageAsync, getLanguageOptions } from '../../utils/common';\r\nimport { custom_page } from '../../custom.config';\r\n\r\nconst LandingPage = custom_page.lading_page && custom_page.lading_page.view ? require('../../custom_src/pages/landing-page/LandingPageView').default : LandingPageView;\r\n\r\nexport default function LandingPageController(props) {\r\n    const navigate = useNavigate();\r\n    const { t } = useTranslation();\r\n\r\n    const [confirm, setConfirm] = useState({});\r\n    const [showRegisterAction,setShowRegisterAction] = useState(false);\r\n    const [currentLanguage, setLanguage] = useState(getLanguage());\r\n    const [defaultLanguage, setDefaultLanguage] = useState(null);\r\n    const languages = getLanguageOptions(currentLanguage);\r\n\r\n    useEffect(() => {\r\n        if (currentLanguage) {\r\n            let exLanguage = languages.filter(x => x.value == currentLanguage);\r\n            if (exLanguage && exLanguage.length > 0){\r\n                setDefaultLanguage(exLanguage[0]);\r\n            } \r\n        }\r\n    }, [])\r\n\r\n    const onRegister = () => {\r\n        if(!portal_config.isDisableRegisterExisingCustomer) {\r\n            setConfirm({\r\n                show: true,\r\n                message: t('exits_rewards_participant'),\r\n                actionTitle: t('btn_register_have_card'),\r\n                closeTitle: t('btn_register_new'),\r\n                onAction: () => {\r\n                    navigate(config_path.register_existing_customer);\r\n                },\r\n                onClose: () => {\r\n                    navigate(config_path.register)\r\n                },\r\n            })\r\n        } else {\r\n            navigate(config_path.register);\r\n        }\r\n    }\r\n\r\n    const onChangeLanguage = async (item) => {\r\n        let _language = languages.filter(x => x.value.toUpperCase() === item.value.toUpperCase());\r\n        if(_language && _language.length > 0){\r\n            setLanguage(_language[0].value);\r\n            storeLanguageAsync(item.value.toLowerCase());\r\n            setDefaultLanguage(_language[0]);\r\n        }\r\n    }\r\n\r\n\r\n    return (\r\n        <LandingPage \r\n            confirm={confirm}\r\n            showRegisterAction={showRegisterAction}\r\n            languages={languages}\r\n            defaultLanguage={defaultLanguage}\r\n            setShowRegisterAction={setShowRegisterAction}\r\n            onChangeLanguage={onChangeLanguage}\r\n        />\r\n    )\r\n}\r\n","import React, { useState } from 'react'\r\nimport { Box, Button, Grid, MenuItem, Popover, Stack, Typography } from '@mui/material'\r\nimport { cache } from '../../utils/cache'\r\nimport { useTranslation } from 'react-i18next'\r\nimport { useNavigate } from 'react-router-dom'\r\nimport { config_path, portalCfg } from '../../router/config.path'\r\nimport { loadTranslations } from '../../utils/common';\r\nimport PublicPage from '../PublicPage'\r\nimport Modal from '../../components/Modal';\r\nexport default function LandingPageView(props) {\r\n    const appConfig = cache.getAppConfig();\r\n    const { t } = useTranslation();\r\n    const navigate = useNavigate();\r\n\r\n    const {defaultLanguage, languages} = props;\r\n    const [anchorElLanguage, setAnchorElLanguage] = useState(null);\r\n\r\n    const handleOpenLanguages = (event) => {\r\n        setAnchorElLanguage(event.currentTarget);\r\n    };\r\n\r\n    const onChangeLanguage = async (item) => {\r\n        setAnchorElLanguage(null);\r\n        props.onChangeLanguage(item);\r\n        await loadTranslations();\r\n    }\r\n\r\n    console.log(\"props.showRegisterAction:\",props.showRegisterAction);\r\n    return (\r\n        <PublicPage confirm={props.confirm}>\r\n            <Grid item xs={12} marginTop={2}>\r\n                <Typography variant='h5' textAlign={'center'} my={6}>{t('landing_welcome')} {appConfig.name}</Typography>\r\n            </Grid>\r\n            <Grid item xs={12}>\r\n                <Grid item xs={12} marginTop={10}>\r\n                    <Button size='large' id='landingPage/btnLogin' fullWidth variant='contained' onClick={() => navigate(config_path.login)}>{t('btn_login')}</Button>\r\n                </Grid>\r\n                <Grid item xs={12} marginTop={2}>\r\n                    <Button size='large' id='landingPage/btnRegister' fullWidth variant='outlined' onClick={() => props.setShowRegisterAction(true)}>{t('btn_register')}</Button>\r\n                </Grid>\r\n                {/* <Grid item xs={12} container justifyContent={'center'} marginTop={7}>\r\n                    <Typography variant='subtitle1'>{'© CRM.COM'}</Typography>\r\n                </Grid> */}\r\n            </Grid>\r\n            <Grid item xs={12} container sx={{\r\n                position: 'absolute',\r\n                bottom: 8,\r\n                width: 'calc(100% - 48px)',\r\n                justifyContent: 'center',\r\n                alignItems: 'center'\r\n            }} >\r\n                <Button onClick={(e) => handleOpenLanguages(e)} size='large' id='header/changeLanguage'>\r\n                    {defaultLanguage ? defaultLanguage.label : \"\"}\r\n                </Button>\r\n                <Grid xs={12} item container justifyContent={'center'}>\r\n                    <Typography variant='subtitle1'>{'© CRM.COM'}</Typography>\r\n                </Grid>\r\n            </Grid>\r\n\r\n            <Popover id='list-languages'\r\n                anchorEl={anchorElLanguage}\r\n                open={Boolean(anchorElLanguage)}\r\n                onClose={() => setAnchorElLanguage(null)}\r\n                sx={{\r\n                    top: 45,\r\n                }}\r\n            >\r\n                {languages && languages.length > 0 && languages.map((item, index) => {\r\n                    return (\r\n                        <MenuItem key={index} onClick={() => onChangeLanguage(item)}>\r\n                            <Typography variant='subtitle2'>{item.label}</Typography>\r\n                        </MenuItem>\r\n                    )\r\n                })}\r\n            </Popover>\r\n            {props.showRegisterAction && <Modal\r\n                isOpen={props.showRegisterAction}\r\n                onClose={() => props.setShowRegisterAction(false)}\r\n            >\r\n                <Box>\r\n                    <Stack direction={'row'}>\r\n                        <Typography>{t('exits_rewards_participant')}</Typography>\r\n                    </Stack>\r\n                    <Stack marginTop={4} direction={'row'} justifyContent={'center'} alignItems={'center'}>\r\n                        <Stack flex={1} justifyContent={'center'} alignItems={'center'} spacing={2}>\r\n                            <img src={portalCfg.publicPath + '/assets/images/register_have_card.png'} alt={'Logo Image'} height={100} />\r\n                            <Button id='landingPage/btnRegisterHaveCard' onClick={() => navigate(config_path.register_existing_customer)} variant='contained'>{t('btn_register_have_card')}</Button>\r\n                        </Stack>\r\n                        <Stack flex={1} justifyContent={'center'} alignItems={'center'} spacing={2}>\r\n                            <img src={portalCfg.publicPath + '/assets/images/register_new.png'} alt={'Logo Image'} height={100} />\r\n                            <Button id='landingPage/btnRegisterNew' onClick={() => navigate(config_path.register)}  variant='contained'>{t('btn_register_new')}</Button>\r\n                        </Stack>\r\n                    </Stack>\r\n                </Box>\r\n            </Modal>}\r\n        </PublicPage>\r\n    )\r\n}\r\n"],"names":["LandingPageView","props","_jsx","Grid","item","x","children","Typography","LandingPage","custom_page","lading_page","view","require","LandingPageController","useNavigate","useTranslation","t","_useState","useState","_useState2","_slicedToArray","confirm","_useState3","_useState4","showRegisterAction","setShowRegisterAction","_useState5","getLanguage","_useState6","currentLanguage","setLanguage","_useState7","_useState8","defaultLanguage","setDefaultLanguage","languages","getLanguageOptions","useEffect","exLanguage","filter","value","length","onChangeLanguage","_ref","_asyncToGenerator","_regeneratorRuntime","mark","_callee","_language","wrap","_context","prev","next","toUpperCase","storeLanguageAsync","toLowerCase","stop","_x","apply","arguments","appConfig","cache","getAppConfig","navigate","anchorElLanguage","setAnchorElLanguage","loadTranslations","console","log","_jsxs","PublicPage","xs","marginTop","variant","textAlign","my","name","Button","size","id","fullWidth","onClick","config_path","login","container","sx","position","bottom","width","justifyContent","alignItems","e","currentTarget","label","Popover","anchorEl","open","Boolean","onClose","top","map","index","MenuItem","Modal","isOpen","Box","Stack","direction","flex","spacing","src","portalCfg","publicPath","alt","height","register_existing_customer","register"],"sourceRoot":""}