{"version":3,"file":"static/js/982.4a9105c1.chunk.js","mappings":"mRAMe,SAASA,EAAwBC,GAC5C,IAAQC,GAAMC,EAAAA,EAAAA,MAAND,EAERE,GAA4CC,EAAAA,EAAAA,WAAS,GAAMC,GAAAC,EAAAA,EAAAA,GAAAH,EAAA,GAApDI,EAAcF,EAAA,GAAEG,EAAiBH,EAAA,GACxCI,GAA8BL,EAAAA,EAAAA,UAAS,MAAKM,GAAAJ,EAAAA,EAAAA,GAAAG,EAAA,GAArCE,EAAOD,EAAA,GAAEE,EAAUF,EAAA,GAC1BG,GAAoDT,EAAAA,EAAAA,UAAS,IAAGU,GAAAR,EAAAA,EAAAA,GAAAO,EAAA,GAAzDE,EAAkBD,EAAA,GAAEE,EAAqBF,EAAA,GAChDG,GAAwBb,EAAAA,EAAAA,UAAS,MAAKc,GAAAZ,EAAAA,EAAAA,GAAAW,EAAA,GAA/BE,EAAID,EAAA,GAAEE,EAAOF,EAAA,GACpBG,GAA4CjB,EAAAA,EAAAA,UAAS,CAAC,GAAEkB,GAAAhB,EAAAA,EAAAA,GAAAe,EAAA,GAAjDE,EAAcD,EAAA,GAAEE,EAAiBF,EAAA,GACxCG,GAA0CrB,EAAAA,EAAAA,UAAS,MAAKsB,GAAApB,EAAAA,EAAAA,GAAAmB,EAAA,GAAjDE,EAAaD,EAAA,GAAEE,EAAgBF,EAAA,GACtCG,GAA4CzB,EAAAA,EAAAA,WAAS,GAAM0B,GAAAxB,EAAAA,EAAAA,GAAAuB,EAAA,GAApDE,EAAcD,EAAA,GAAEE,EAAiBF,EAAA,GACxCG,GAA4B7B,EAAAA,EAAAA,UAAS,MAAK8B,GAAA5B,EAAAA,EAAAA,GAAA2B,EAAA,GAAnCE,EAAMD,EAAA,GAAEE,EAASF,EAAA,IAExBG,EAAAA,EAAAA,YAAU,WACNC,IACAC,GACJ,GAAG,IAEH,IAAMD,EAAiB,eAAAE,GAAAC,EAAAA,EAAAA,IAAAC,EAAAA,EAAAA,KAAAC,MAAG,SAAAC,IAAA,IAAAC,EAAA,OAAAH,EAAAA,EAAAA,KAAAI,MAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,cAAAF,EAAAC,KAAA,EAAAD,EAAAE,KAAA,EAECC,EAAAA,QAAYC,QAAQC,sBAAsB,CACzDC,iBAAiB,IACnB,OAFER,EAAME,EAAAO,KAGVC,QAAQC,IAAI,kCAAmCX,GAC5B,MAAfA,EAAOY,MACHZ,EAAOa,MAAQb,EAAOa,KAAKC,SAASC,EAAaf,EAAOa,KAAKC,SACpEZ,EAAAE,KAAA,gBAAAF,EAAAC,KAAA,EAAAD,EAAAc,GAAAd,EAAA,SAEDQ,QAAQC,IAAI,iCAAgCT,EAAAc,IAAQ,yBAAAd,EAAAe,OAAA,GAAAlB,EAAA,kBAE3D,kBAZsB,OAAAJ,EAAAuB,MAAA,KAAAC,UAAA,KAcjBzB,EAAY,eAAA0B,GAAAxB,EAAAA,EAAAA,IAAAC,EAAAA,EAAAA,KAAAC,MAAG,SAAAuB,IAAA,IAAAC,EAAAtB,EAAA,OAAAH,EAAAA,EAAAA,KAAAI,MAAA,SAAAsB,GAAA,cAAAA,EAAApB,KAAAoB,EAAAnB,MAAA,OAGqB,OAFtCjB,GAAkB,GAAMoC,EAAApB,KAAA,EAEhBmB,EAAWE,EAAAA,MAAMC,cAAaF,EAAAnB,KAAA,EACfC,EAAAA,QAAYf,OAAOoC,UAAUJ,GAAU,KAAD,EACrC,QADhBtB,EAAMuB,EAAAd,MACCG,OACPrB,EAAUS,EAAOa,MACjBW,EAAAA,MAAMG,YAAY3B,EAAOa,KAAKe,KACjCL,EAAAnB,KAAA,gBAAAmB,EAAApB,KAAA,EAAAoB,EAAAP,GAAAO,EAAA,SAEDb,QAAQC,IAAI,sBAAqBY,EAAAP,IAAS,QAE9C7B,GAAkB,GAAO,yBAAAoC,EAAAN,OAAA,GAAAI,EAAA,kBAC5B,kBAbiB,OAAAD,EAAAF,MAAA,KAAAC,UAAA,KAeZJ,EAAe,SAACF,GAClB,IAAIgB,GAA8B,EAC9BC,EAAsB,GACtBC,EAAgB,GAChBC,EAAS,GACTC,EAAW,GACXC,EAAiB,KAEjBrB,GAAQA,EAAKsB,OAAS,IACH,GAAftB,EAAKsB,SAAaD,EAAiBrB,EAAK,IAC5CA,EAAKuB,SAAQ,SAAAC,GACuB,QAA5BA,EAAKC,qBACLN,EAAOO,KAAKF,GAEgB,iBAA5BA,EAAKC,qBACLP,EAAcQ,KAAKF,GAES,UAA5BA,EAAKC,qBACLL,EAASM,KAAKF,GAEdA,EAAKC,sBAAwBR,EAAoBU,SAASH,EAAKC,sBAC/DR,EAAoBS,KAAKF,EAAKC,oBAEtC,KAEAR,GAAuBA,EAAoBK,OAAS,IAChDL,EAAoBK,OAAS,EAAGN,GAA8B,GAE9DA,GAA8B,EAC9BtD,EAAQuD,EAAoB,MAGpC,IAAIW,EAAa,CACbC,2BAA4Bb,EAC5B3D,mBAAoB4D,EACpBa,MAAOX,EACPY,cAAeb,EACfc,QAASZ,EACTnD,cAAeoD,GAUnB,OARAxB,QAAQC,IAAI,oBAAqB8B,GACjC9D,EAAkB,CACdgE,MAAOX,EACPY,cAAeb,EACfc,QAASZ,IAEb9D,EAAsB2D,GAClBI,GAAgBnD,EAAiBmD,GAC9BO,CACX,EAEMK,EAAQ,eAAAC,GAAAnD,EAAAA,EAAAA,IAAAC,EAAAA,EAAAA,KAAAC,MAAG,SAAAkD,EAAOC,GAAM,IAAAC,EAAAlD,EAAA,OAAAH,EAAAA,EAAAA,KAAAI,MAAA,SAAAkD,GAAA,cAAAA,EAAAhD,KAAAgD,EAAA/C,MAAA,OAYrB,OAXLzC,GAAkB,GAClB+C,QAAQC,IAAI,yBAA0BsC,GAAOE,EAAAhD,KAAA,EAErC+C,EAAO,CACPE,OAAQH,EAAOG,QAEftE,GAAiBR,IACjB4E,EAAKG,eAAiB,CAClB/E,KAAMA,EACNsD,GAAI9C,IAEXqE,EAAA/C,KAAA,EACkBC,EAAAA,QAAYiD,QAAQC,aAAaL,GAAM,KAAD,EACX,GAD1ClD,EAAMmD,EAAA1C,KACVC,QAAQC,IAAI,yBAA0BX,GACnB,MAAfA,EAAOY,KAAY,CAAAuC,EAAA/C,KAAA,gBAAA+C,EAAA/C,KAAA,GACboD,IAAY,KAAD,GACjBC,EAAY,CAAEC,QAAQ,EAAM5F,QAASV,EAAE,4BAA4B+F,EAAA/C,KAAA,iBAEnEqD,EAAY,CAAEC,QAAQ,EAAM5F,QAASV,EAAE,2BAA2B,QAAA+F,EAAA/C,KAAA,iBAAA+C,EAAAhD,KAAA,GAAAgD,EAAAnC,GAAAmC,EAAA,SAGtEzC,QAAQC,IAAI,wBAAuBwC,EAAAnC,IACnCyC,EAAY,CAAEC,QAAQ,EAAM5F,QAASV,EAAE,uBAAuB,QAElEO,GAAkB,GAAM,yBAAAwF,EAAAlC,OAAA,GAAA+B,EAAA,mBAC3B,gBA1BaW,GAAA,OAAAZ,EAAA7B,MAAA,KAAAC,UAAA,KAqCRsC,EAAc,SAAHG,GAA8D,IAAxDF,EAAME,EAANF,OAAQG,EAAKD,EAALC,MAAO/F,EAAO8F,EAAP9F,QAASgG,EAAYF,EAAZE,aAAcC,EAAUH,EAAVG,WACzDpG,GAAkB,GAClBI,EAAW,CAAEiG,KAAMN,EAAQG,MAAOA,EAAO/C,QAAShD,EAASgG,aAAAA,EAAcC,WAAYA,GAA0B,kBAAMhG,EAAW,CAAC,EAAE,GACvI,EAEMyF,EAAS,eAAAS,GAAArE,EAAAA,EAAAA,IAAAC,EAAAA,EAAAA,KAAAC,MAAG,SAAAoE,IAAA,OAAArE,EAAAA,EAAAA,KAAAI,MAAA,SAAAkE,GAAA,cAAAA,EAAAhE,KAAAgE,EAAA/D,MAAA,OACdX,IACAC,IAAe,wBAAAyE,EAAAlD,OAAA,GAAAiD,EAAA,KAClB,kBAHc,OAAAD,EAAA/C,MAAA,KAAAC,UAAA,KAKf,OACIiD,EAAAA,EAAAA,KAAAC,EAAAA,SAAA,CAAAC,UACIF,EAAAA,EAAAA,KAACG,EAAAA,QAAiB,CACdC,OAAQrH,EAAMqH,OACd9G,eAAgBA,EAChBI,QAASA,EACTI,mBAAoBA,EACpBI,KAAMA,EACNI,eAAgBA,EAChBI,cAAeA,EACfQ,OAAQA,EACRJ,eAAgBA,EAChBuF,QAAStH,EAAMsH,QACf1F,iBAAkBA,EAClBR,QAASA,EACTuE,SAAUA,EACV4B,eAnCW,SAACC,EAAQC,GACd,QAAVD,GACApG,EAAQqG,GAEE,kBAAVD,GACA5F,EAAiB6F,EAEzB,KAgCJ,C,4QC7Je,SAASL,EAAkBpH,GACtC,IAAQC,GAAMC,EAAAA,EAAAA,MAAND,EACAsB,EAAqEvB,EAArEuB,eAAgBJ,EAAqDnB,EAArDmB,KAAMJ,EAA+Cf,EAA/Ce,mBAAoBoB,EAA2BnC,EAA3BmC,OAAQJ,EAAmB/B,EAAnB+B,eACpD2F,EAAgBrD,EAAAA,MAAMsD,kBACxBC,EAAS,GACTC,EAAkB,GAwBtB,GAtBI9G,GAAsBA,EAAmBiE,OAAS,GAClDjE,EAAmBkE,SAAQ,SAAAC,GACX,SAARA,GACA0C,EAAOxC,KAAK,CACR0C,MAAO7H,EAAE,QACTwH,MAAO,SAGH,kBAARvC,GACA0C,EAAOxC,KAAK,CACR0C,MAAO7H,EAAE,iBACTwH,MAAO,kBAGH,WAARvC,GACA0C,EAAOxC,KAAK,CACR0C,MAAO7H,EAAE,UACTwH,MAAO,UAGnB,IAEAlG,EAAgB,CAChB,GAAY,SAARJ,GAAkBI,EAAeiE,MAAO,CACxC,IAAIX,EAAS,GACbtD,EAAeiE,MAAMP,SAAQ,SAAAC,GACzB,IAAI4C,EAAQ,KACR5C,EAAK6C,MAAQ7C,EAAK6C,KAAKC,QACvBF,EAAQ,OAAS5C,EAAK6C,KAAKC,OAE3BF,GAAOjD,EAAOO,MAAI6C,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAC,CAAC,EAAI/C,GAAI,IAAE4C,MAAOA,IAC7C,IACAD,EAAkBhD,CACtB,CACA,GAAY,WAAR1D,GAAoBI,EAAemE,QAAS,CAC5C,IAAIZ,EAAW,GACfvD,EAAemE,QAAQT,SAAQ,SAAAC,GAC3B,IAAI4C,EAAQ,KACR5C,EAAK/C,QAAU+C,EAAK/C,OAAO+F,MAC3BJ,EAAQ5C,EAAK/C,OAAO+F,MACbhD,EAAK/C,QAAU+C,EAAK/C,OAAOgG,OAASjD,EAAK/C,OAAOgG,MAAMC,SAC7DN,EAAQ5C,EAAK/C,OAAOgG,MAAMC,QAE1BN,GAAOhD,EAASM,MAAI6C,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAC,CAAC,EAAI/C,GAAI,IAAE4C,MAAOA,IAC/C,IACAD,EAAkB/C,CACtB,CACA,GAAY,kBAAR3D,GAA2BI,EAAekE,cAAe,CACzD,IAAI4C,EAAiB,GACrB9G,EAAekE,cAAcR,SAAQ,SAAAC,GACjC,IAAIoD,EAAepD,EAAKqD,eAAiBrD,EAAKqD,cAAcC,aAAetD,EAAKqD,cAAcC,aAAe,KAC7G,GAAItD,EAAKqD,cAAe,CACpB,GAAqB,QAAjBb,EACA,GAAIxC,EAAKqD,cAAcE,KAGnBH,EAFapD,EAAKqD,cAAcE,KAAKC,OAAO,EAAG,GAEvB,wBADZxD,EAAKqD,cAAcE,KAAKC,OAAOxD,EAAKqD,cAAcE,KAAKzD,OAAS,EAAGE,EAAKqD,cAAcE,KAAKzD,QAI1F,QAAjB0C,IACAY,EAAepD,EAAKqD,cAAcI,eAAiBzD,EAAKqD,cAAcI,eAAiB,IAEtE,QAAjBjB,IACAY,EAAepD,EAAKqD,cAAcI,eAAiBzD,EAAKqD,cAAcI,eAAiB,GAE/F,CACIL,GAAcD,EAAejD,MAAI6C,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAC,CAAC,EAAI/C,GAAI,IAAE4C,MAAOQ,IAC5D,IACAT,EAAkBQ,CACtB,CACJ,CACA,IAAIO,EAAWvE,EAAAA,MAAMwE,cACjBC,EAAezE,EAAAA,MAAMsD,kBACnBoB,EAAkB5G,EAAS6G,EAAAA,SAASC,iBAAiB9G,EAAO+G,UAAU,GAAQ,KAC9EC,EAAmBJ,EAAmBA,EAAgBrB,eAAgB0B,EAAAA,EAAAA,mBAAkBL,EAAgBrB,eAAiBkB,EAAY,KACrIS,EAAalH,EAAS6G,EAAAA,SAASC,iBAAiB9G,EAAO+G,UAAU,EAAOH,EAAgBrB,cAAgBqB,EAAgBrB,cAAgBoB,GAAgB,KACxJQ,EAAcD,EAAcA,EAAW3B,eAAgB0B,EAAAA,EAAAA,mBAAkBC,EAAW3B,eAAiBkB,EAAY,KAEvH,OACI3B,EAAAA,EAAAA,KAAAC,EAAAA,SAAA,CAAAC,UACIF,EAAAA,EAAAA,KAACsC,EAAAA,QAAe,CAAClC,OAAQrH,EAAMqH,OAAQC,QAAStH,EAAMsH,QAASZ,MAAOzG,EAAE,kBAAmBU,QAASX,EAAMW,QAASJ,eAAgBP,EAAMO,eAAe4G,UACpJqC,EAAAA,EAAAA,MAACC,EAAAA,GAAI,CAACvE,MAAI,EAACwE,GAAI,GAAGvC,SAAA,EACdF,EAAAA,EAAAA,KAAA,UAAAE,SACKpF,GAAiBkF,EAAAA,EAAAA,KAAC0C,EAAAA,EAAgB,KAAM1C,EAAAA,EAAAA,KAAAC,EAAAA,SAAA,CAAAC,UACrCqC,EAAAA,EAAAA,MAACI,EAAAA,EAAK,CAACC,UAAW,MAAOC,WAAW,SAASC,QAAS,EAAE5C,SAAA,EACpDqC,EAAAA,EAAAA,MAACI,EAAAA,EAAK,CAACI,KAAM,EAAE7C,SAAA,EACXqC,EAAAA,EAAAA,MAACS,EAAAA,EAAU,CAACC,QAAQ,KAAI/C,SAAA,CAAEgC,EAAkBJ,GAAmBA,EAAgBoB,MAAOC,EAAAA,EAAAA,cAAarB,EAAgBoB,KAAME,EAAAA,cAAcC,wBAA0B,WACjKrD,EAAAA,EAAAA,KAACgD,EAAAA,EAAU,CAACC,QAAQ,YAAW/C,SAAElH,EAAE,mBAEvCuJ,EAAAA,EAAAA,MAACI,EAAAA,EAAK,CAACI,KAAM,EAAE7C,SAAA,EACXqC,EAAAA,EAAAA,MAACS,EAAAA,EAAU,CAACC,QAAQ,KAAI/C,SAAA,CAAEmC,EAAaD,GAAcA,EAAWkB,OAAQH,EAAAA,EAAAA,cAAaf,EAAWkB,MAAOF,EAAAA,cAAcC,wBAA0B,WAC/IrD,EAAAA,EAAAA,KAACgD,EAAAA,EAAU,CAACC,QAAQ,YAAW/C,SAAElH,EAAE,4BAKnDgH,EAAAA,EAAAA,KAACuD,EAAAA,GAAI,CACD7E,SAAU3F,EAAM2F,SAChB8E,OAAQ,SAAAjI,GAAA,IAAGkI,EAAYlI,EAAZkI,aAAY,OACnBlB,EAAAA,EAAAA,MAACC,EAAAA,GAAI,CAACvE,MAAI,EAACwE,GAAI,GAAGvC,SAAA,CACbS,GAAUA,EAAO5C,OAAS,IAAKiC,EAAAA,EAAAA,KAACwC,EAAAA,GAAI,CAACvE,MAAI,EAACwE,GAAI,GAAIiB,QAAS,EAAExD,UAC1DF,EAAAA,EAAAA,KAAC2D,EAAAA,GAAK,CACFC,KAAK,OACLC,UAAWC,EAAAA,aACXC,QAAQ,EACRC,SAAS,EACTC,WAAYtD,EACZuD,YAAa,IACbrD,MAAO7H,EAAE,mCACTmL,iBAAkB,SAACC,GAAC,OAAKrL,EAAMuH,eAAe,OAAQ8D,EAAE7D,OAAOC,MAAM,OAG7ER,EAAAA,EAAAA,KAACwC,EAAAA,GAAI,CAACvE,MAAI,EAACwE,GAAI,GAAIiB,QAAS,EAAExD,UAC1BF,EAAAA,EAAAA,KAAC2D,EAAAA,GAAK,CACFC,KAAK,iBACLC,UAAWC,EAAAA,aACXI,YAAa,IACbrD,MAAO7H,EAAE,8BACT+K,QAAQ,EACRC,SAAS,EACTC,WAAYrD,EACZyD,QAAQ,KACRC,SAAU,QACVH,iBAAkB,SAACC,GAAC,OAAKrL,EAAMuH,eAAe,iBAAkB8D,EAAE7D,OAAOC,MAAM,OAGvFR,EAAAA,EAAAA,KAACwC,EAAAA,GAAI,CAACvE,MAAI,EAACwE,GAAI,GAAIiB,QAAS,EAAExD,UAC1BF,EAAAA,EAAAA,KAAC2D,EAAAA,GAAK,CACFC,KAAK,SACL/C,MAAO7H,EAAE,yBACT6K,UAAWU,EAAAA,oBACXR,QAAQ,EACRC,SAAS,EACTQ,SAAUC,EAAAA,QAAWC,kBAAkBD,EAAAA,QAAWE,UAClDC,YAAY,SACZC,WAAW,gBAGnB7E,EAAAA,EAAAA,KAACwC,EAAAA,GAAI,CAACvE,MAAI,EAACwE,GAAI,GAAIiB,QAAS,EAAExD,UAC1BF,EAAAA,EAAAA,KAAC8E,EAAAA,EAAM,CAACtH,GAAG,0BAA0BuH,KAAK,QAAQC,WAAS,EAAC/B,QAAQ,YAAYgC,QAASxB,EAAcvJ,KAAK,SAAQgG,SAAElH,EAAE,oBAEzH,UAOnC,C","sources":["pages/payout/RequestPayoutController.js","pages/payout/RequestPayoutView.js"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\r\nimport RequestPayoutView from \"./RequestPayoutView\";\r\nimport crmservices from '../../wsclient'\r\nimport { useTranslation } from \"react-i18next\";\r\nimport { cache } from \"../../utils/cache\";\r\n\r\nexport default function RequestPayoutController(props) {\r\n    const { t } = useTranslation();\r\n\r\n    const [showProcessing, setShowProcessing] = useState(false);\r\n    const [message, setMessage] = useState(null);\r\n    const [paymentMethodTypes, setPaymentMethodTypes] = useState([]);\r\n    const [type, setType] = useState(null);\r\n    const [paymentMethods, setPaymentMethods] = useState({});\r\n    const [paymentMethod, setPaymentMethod] = useState(null);\r\n    const [showLoadWallet, setShowLoadWallet] = useState(false);\r\n    const [wallet, setWallet] = useState(null);\r\n\r\n    useEffect(() => {\r\n        getPaymentMethods();\r\n        onLoadWallet();\r\n    }, [])\r\n\r\n    const getPaymentMethods = async () => {\r\n        try {\r\n            let result = await crmservices.payment.getListPaymentMethods({\r\n                support_payouts: true,\r\n            })\r\n            console.log(\"AAAA getPaymentMethods result: \", result);\r\n            if (result.code == \"OK\") {\r\n                if (result.data && result.data.content) groupPayouts(result.data.content);\r\n            }\r\n        } catch (error) {\r\n            console.log(\"AAAA getPaymentMethods error: \", error)\r\n        }\r\n    }\r\n\r\n    const onLoadWallet = async () => {\r\n        setShowLoadWallet(true);\r\n        try {\r\n            let walletId = cache.getWalletId();\r\n            var result = await crmservices.wallet.getWallet(walletId);\r\n            if (result.code === 'OK') {\r\n                setWallet(result.data);\r\n                cache.setWalletId(result.data.id);\r\n            }\r\n        } catch (error) {\r\n            console.log(\"onLoadWallet error:\", error);\r\n        }\r\n        setShowLoadWallet(false);\r\n    }\r\n\r\n    const groupPayouts = (data) => {\r\n        let _multiplePaymentMethodTypes = false;\r\n        let _paymentMethodTypes = [];\r\n        let _accountDebit = [];\r\n        let _cards = [];\r\n        let _wallets = [];\r\n        let _paymentMethod = null;\r\n\r\n        if (data && data.length > 0) {\r\n            if (data.length == 1) _paymentMethod = data[0];\r\n            data.forEach(item => {\r\n                if (item.payment_method_type == 'CARD') {\r\n                    _cards.push(item)\r\n                }\r\n                if (item.payment_method_type == 'ACCOUNT_DEBIT') {\r\n                    _accountDebit.push(item)\r\n                }\r\n                if (item.payment_method_type == 'WALLET') {\r\n                    _wallets.push(item)\r\n                }\r\n                if (item.payment_method_type && !_paymentMethodTypes.includes(item.payment_method_type)) {\r\n                    _paymentMethodTypes.push(item.payment_method_type)\r\n                }\r\n            });\r\n        }\r\n        if (_paymentMethodTypes && _paymentMethodTypes.length > 0) {\r\n            if (_paymentMethodTypes.length > 1) _multiplePaymentMethodTypes = true;\r\n            else {\r\n                _multiplePaymentMethodTypes = false;\r\n                setType(_paymentMethodTypes[0]);\r\n            }\r\n        }\r\n        let _groupInfo = {\r\n            multiplePaymentMethodTypes: _multiplePaymentMethodTypes,\r\n            paymentMethodTypes: _paymentMethodTypes,\r\n            cards: _cards,\r\n            accountDebits: _accountDebit,\r\n            wallets: _wallets,\r\n            paymentMethod: _paymentMethod,\r\n        }\r\n        console.log(\"AAAA _groupInfo: \", _groupInfo)\r\n        setPaymentMethods({\r\n            cards: _cards,\r\n            accountDebits: _accountDebit,\r\n            wallets: _wallets,\r\n        })\r\n        setPaymentMethodTypes(_paymentMethodTypes);\r\n        if (_paymentMethod) setPaymentMethod(_paymentMethod)\r\n        return _groupInfo\r\n    }\r\n\r\n    const onSubmit = async (values) => {\r\n        setShowProcessing(true)\r\n        console.log(\"AAAA onSubmit values: \", values)\r\n        try {\r\n            let body = {\r\n                amount: values.amount\r\n            }\r\n            if (paymentMethod && type) {\r\n                body.payment_method = {\r\n                    type: type,\r\n                    id: paymentMethod,\r\n                }\r\n            }\r\n            let result = await crmservices.payouts.createPayout(body);\r\n            console.log(\"AAAA onSubmit result: \", result);\r\n            if (result.code == 'OK') {\r\n                await onRefresh();\r\n                showMessage({ status: true, message: t('REQUEST_PAYOUT_SUCCESS') })\r\n            } else {\r\n                showMessage({ status: true, message: t('REQUEST_PAYOUT_FAILED') })\r\n            }\r\n        } catch (error) {\r\n            console.log(\"AAAA onSubmit error: \", error)\r\n            showMessage({ status: true, message: t('EXCEPTION_PROCESS') })\r\n        }\r\n        setShowProcessing(false)\r\n    }\r\n\r\n    const onHandleChange = (target, value) => {\r\n        if (target == 'type') {\r\n            setType(value);\r\n        }\r\n        if (target == 'payment_method') {\r\n            setPaymentMethod(value);\r\n        }\r\n    }\r\n\r\n    const showMessage = ({ status, title, message, otherMessage, callBackFn }) => {\r\n        setShowProcessing(false);\r\n        setMessage({ show: status, title: title, content: message, otherMessage, callBackFn: callBackFn ? callBackFn : () => setMessage({}) });\r\n    }\r\n\r\n    const onRefresh = async () => {\r\n        getPaymentMethods();\r\n        onLoadWallet();\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <RequestPayoutView\r\n                isOpen={props.isOpen}\r\n                showProcessing={showProcessing}\r\n                message={message}\r\n                paymentMethodTypes={paymentMethodTypes}\r\n                type={type}\r\n                paymentMethods={paymentMethods}\r\n                paymentMethod={paymentMethod}\r\n                wallet={wallet}\r\n                showLoadWallet={showLoadWallet}\r\n                onClose={props.onClose}\r\n                setPaymentMethod={setPaymentMethod}\r\n                setType={setType}\r\n                onSubmit={onSubmit}\r\n                onHandleChange={onHandleChange}\r\n            />\r\n        </>\r\n    )\r\n}","import { Button, CircularProgress, Grid, Stack, Typography } from \"@mui/material\";\r\nimport React from \"react\";\r\nimport { Form, Field } from \"react-final-form\";\r\nimport { useTranslation } from \"react-i18next\";\r\nimport DrawerComponent from \"../../components/Drawer\";\r\nimport { NumbericInputCustom, SelectCustom } from \"../../components/FormElements\";\r\nimport { portal_config } from \"../../portal.config\";\r\nimport { cache } from \"../../utils/cache\";\r\nimport { getCurrencySymbol } from \"../../utils/common\";\r\nimport { formatAmount } from \"../../utils/util\";\r\nimport validators from \"../../utils/validators\";\r\nimport { dataUtil } from \"../../wsclient/crmservices/dataUtil\";\r\n\r\nexport default function RequestPayoutView(props) {\r\n    const { t } = useTranslation();\r\n    const { paymentMethods, type, paymentMethodTypes, wallet, showLoadWallet } = props;\r\n    const currency_code = cache.getCurrencyCode();\r\n    let _types = [];\r\n    let _paymentMethods = [];\r\n\r\n    if (paymentMethodTypes && paymentMethodTypes.length > 1) {\r\n        paymentMethodTypes.forEach(item => {\r\n            if (item ==='CARD') {\r\n                _types.push({\r\n                    label: t('card'),\r\n                    value: 'CARD',\r\n                })\r\n            }\r\n            if (item ==='ACCOUNT_DEBIT') {\r\n                _types.push({\r\n                    label: t('account_debit'),\r\n                    value: 'ACCOUNT_DEBIT',\r\n                })\r\n            }\r\n            if (item ==='WALLET') {\r\n                _types.push({\r\n                    label: t('wallet'),\r\n                    value: 'WALLET',\r\n                })\r\n            }\r\n        });\r\n    }\r\n    if (paymentMethods) {\r\n        if (type ==='CARD' && paymentMethods.cards) {\r\n            let _cards = [];\r\n            paymentMethods.cards.forEach(item => {\r\n                let label = null;\r\n                if (item.card && item.card.last4) {\r\n                    label = '****' + item.card.last4\r\n                }\r\n                if (label) _cards.push({ ...item, label: label });\r\n            });\r\n            _paymentMethods = _cards;\r\n        }\r\n        if (type ==='WALLET' && paymentMethods.wallets) {\r\n            let _wallets = [];\r\n            paymentMethods.wallets.forEach(item => {\r\n                let label = null;\r\n                if (item.wallet && item.wallet.email) {\r\n                    label = item.wallet.email\r\n                } else if (item.wallet && item.wallet.phone && item.wallet.phone.number) {\r\n                    label = item.wallet.phone.number\r\n                }\r\n                if (label) _wallets.push({ ...item, label: label });\r\n            });\r\n            _paymentMethods = _wallets;\r\n        }\r\n        if (type ==='ACCOUNT_DEBIT' && paymentMethods.accountDebits) {\r\n            let _accountDebits = [];\r\n            paymentMethods.accountDebits.forEach(item => {\r\n                let accountLabel = item.account_debit && item.account_debit.account_name ? item.account_debit.account_name : null;\r\n                if (item.account_debit) {\r\n                    if (currency_code ==='EUR') {\r\n                        if (item.account_debit.iban) {\r\n                            let first4 = item.account_debit.iban.substr(0, 4);\r\n                            let last4 = item.account_debit.iban.substr(item.account_debit.iban.length - 4, item.account_debit.iban.length);\r\n                            accountLabel = first4 + \" **** **** **** **** \" + last4;\r\n                        }\r\n                    }\r\n                    if (currency_code ==='GBP') {\r\n                        accountLabel = item.account_debit.account_number ? item.account_debit.account_number : ''\r\n                    }\r\n                    if (currency_code ==='USD') {\r\n                        accountLabel = item.account_debit.account_number ? item.account_debit.account_number : ''\r\n                    }\r\n                }\r\n                if (accountLabel) _accountDebits.push({ ...item, label: accountLabel });\r\n            });\r\n            _paymentMethods = _accountDebits;\r\n        }\r\n    }\r\n    let currency = cache.getCurrency();\r\n    let currencyCode = cache.getCurrencyCode();\r\n    const businessBalance = wallet ? dataUtil.getBalanceByType(wallet.balances, true) : null;\r\n    const currencyBusiness = businessBalance ? (businessBalance.currency_code ? getCurrencySymbol(businessBalance.currency_code) : currency) : null;\r\n    const crmBalance = wallet ? dataUtil.getBalanceByType(wallet.balances, false, businessBalance.currency_code ? businessBalance.currency_code : currencyCode) : null;\r\n    const currencyCRM = crmBalance ? (crmBalance.currency_code ? getCurrencySymbol(crmBalance.currency_code) : currency) : null;\r\n\r\n    return (\r\n        <>\r\n            <DrawerComponent isOpen={props.isOpen} onClose={props.onClose} title={t('request_payout')} message={props.message} showProcessing={props.showProcessing}>\r\n                <Grid item xs={12}>\r\n                    <center>\r\n                        {showLoadWallet ? <CircularProgress /> : <>\r\n                            <Stack direction={'row'} alignItems='center' spacing={1}>\r\n                                <Stack flex={1}>\r\n                                    <Typography variant=\"h3\">{currencyBusiness}{businessBalance && businessBalance.open ? formatAmount(businessBalance.open, portal_config.isFormatDecimalBalance) : '0.00'}</Typography>\r\n                                    <Typography variant=\"subtitle2\">{t('any_where')}</Typography>\r\n                                </Stack>\r\n                                <Stack flex={1}>\r\n                                    <Typography variant=\"h3\">{currencyCRM}{crmBalance && crmBalance.total ? formatAmount(crmBalance.total, portal_config.isFormatDecimalBalance) : '0.00'}</Typography>\r\n                                    <Typography variant=\"subtitle2\">{t('cash_pocket')}</Typography>\r\n                                </Stack>\r\n                            </Stack>\r\n                        </>}\r\n                    </center>\r\n                    <Form\r\n                        onSubmit={props.onSubmit}\r\n                        render={({ handleSubmit }) => (\r\n                            <Grid item xs={12}>\r\n                                {_types && _types.length > 1 && <Grid item xs={12} marginY={2}>\r\n                                    <Field\r\n                                        name=\"type\"\r\n                                        component={SelectCustom}\r\n                                        isEdit={true}\r\n                                        isValid={true}\r\n                                        selectData={_types}\r\n                                        placeholder={' '}\r\n                                        label={t('select_your_payment_method_type')}\r\n                                        onSelectedChange={(e) => props.onHandleChange('type', e.target.value)}\r\n                                    />\r\n                                </Grid>}\r\n                                <Grid item xs={12} marginY={2}>\r\n                                    <Field\r\n                                        name=\"payment_method\"\r\n                                        component={SelectCustom}\r\n                                        placeholder={' '}\r\n                                        label={t('select_your_payment_method')}\r\n                                        isEdit={true}\r\n                                        isValid={true}\r\n                                        selectData={_paymentMethods}\r\n                                        keyName='id'\r\n                                        keyLabel={'label'}\r\n                                        onSelectedChange={(e) => props.onHandleChange('payment_method', e.target.value)}\r\n                                    />\r\n                                </Grid>\r\n                                <Grid item xs={12} marginY={2}>\r\n                                    <Field\r\n                                        name=\"amount\"\r\n                                        label={t('request_payout_amount')}\r\n                                        component={NumbericInputCustom}\r\n                                        isEdit={true}\r\n                                        isValid={true}\r\n                                        validate={validators.composeValidators(validators.required)}\r\n                                        customLabel=\"wallet\"\r\n                                        formatType=\"currency\"\r\n                                    />\r\n                                </Grid>\r\n                                <Grid item xs={12} marginY={3}>\r\n                                    <Button id='requestPayout/btnSubmit' size=\"large\" fullWidth variant='contained' onClick={handleSubmit} type='submit'>{t('btn_submit')}</Button>\r\n                                </Grid>\r\n                            </Grid>\r\n                        )}\r\n                    />\r\n                </Grid>\r\n            </DrawerComponent>\r\n        </>\r\n    )\r\n}"],"names":["RequestPayoutController","props","t","useTranslation","_useState","useState","_useState2","_slicedToArray","showProcessing","setShowProcessing","_useState3","_useState4","message","setMessage","_useState5","_useState6","paymentMethodTypes","setPaymentMethodTypes","_useState7","_useState8","type","setType","_useState9","_useState10","paymentMethods","setPaymentMethods","_useState11","_useState12","paymentMethod","setPaymentMethod","_useState13","_useState14","showLoadWallet","setShowLoadWallet","_useState15","_useState16","wallet","setWallet","useEffect","getPaymentMethods","onLoadWallet","_ref","_asyncToGenerator","_regeneratorRuntime","mark","_callee","result","wrap","_context","prev","next","crmservices","payment","getListPaymentMethods","support_payouts","sent","console","log","code","data","content","groupPayouts","t0","stop","apply","arguments","_ref2","_callee2","walletId","_context2","cache","getWalletId","getWallet","setWalletId","id","_multiplePaymentMethodTypes","_paymentMethodTypes","_accountDebit","_cards","_wallets","_paymentMethod","length","forEach","item","payment_method_type","push","includes","_groupInfo","multiplePaymentMethodTypes","cards","accountDebits","wallets","onSubmit","_ref3","_callee3","values","body","_context3","amount","payment_method","payouts","createPayout","onRefresh","showMessage","status","_x","_ref4","title","otherMessage","callBackFn","show","_ref5","_callee4","_context4","_jsx","_Fragment","children","RequestPayoutView","isOpen","onClose","onHandleChange","target","value","currency_code","getCurrencyCode","_types","_paymentMethods","label","card","last4","_objectSpread","email","phone","number","_accountDebits","accountLabel","account_debit","account_name","iban","substr","account_number","currency","getCurrency","currencyCode","businessBalance","dataUtil","getBalanceByType","balances","currencyBusiness","getCurrencySymbol","crmBalance","currencyCRM","DrawerComponent","_jsxs","Grid","xs","CircularProgress","Stack","direction","alignItems","spacing","flex","Typography","variant","open","formatAmount","portal_config","isFormatDecimalBalance","total","Form","render","handleSubmit","marginY","Field","name","component","SelectCustom","isEdit","isValid","selectData","placeholder","onSelectedChange","e","keyName","keyLabel","NumbericInputCustom","validate","validators","composeValidators","required","customLabel","formatType","Button","size","fullWidth","onClick"],"sourceRoot":""}